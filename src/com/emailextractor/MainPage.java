/**
 * This is the MainPage of Email Extractor. Here someone can search for emails,
 * select deselect then, choose a download path for downloading attachment,
 * creating CSV file, go to the browser and singing out.
 *
 */
package com.emailextractor;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.search.SearchTerm;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nishi_000
 */
public class MainPage extends javax.swing.JFrame {

    ServerConnection sc;
    private String userName;
    private Folder inbox;
    private Message[] messages;
    private SearchTerm searchCondition;
    DefaultTableModel model;
    private boolean flag = true;
    private Thread thisThread;

    /**
     * Creates new form MainPage
     *
     * @param sc
     * @param userName
     */
    public MainPage(ServerConnection sc, String userName) {

        this.userName = userName;
        this.sc = sc;
        initComponents();
        model = (DefaultTableModel) mailListTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Container = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        selectAllBtn = new javax.swing.JButton();
        deselectAllBtn = new javax.swing.JButton();
        chooseDownloadPathBtn = new javax.swing.JButton();
        createCsvFileBtn = new javax.swing.JButton();
        downloadAttachmentBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mailListTable = new javax.swing.JTable();
        progressbar = new javax.swing.JLabel();
        emailAddressLable = new javax.swing.JLabel();
        signOutBtn = new javax.swing.JButton();
        emailAccountBtn = new javax.swing.JButton();
        emailRadioBtn = new javax.swing.JRadioButton();
        subjectRadioBtn = new javax.swing.JRadioButton();
        stopBtn = new javax.swing.JButton();
        getAllMailsBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Email Extractor 1.0");

        Container.setBackground(new java.awt.Color(153, 153, 153));
        Container.setPreferredSize(new java.awt.Dimension(950, 550));

        searchText.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        searchBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        selectAllBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        selectAllBtn.setText("Select All");

        deselectAllBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deselectAllBtn.setText("Deselect All");

        chooseDownloadPathBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        chooseDownloadPathBtn.setText("Choose Download Path");

        createCsvFileBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        createCsvFileBtn.setText("Create CSV File");

        downloadAttachmentBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        downloadAttachmentBtn.setText("Download Attachment");

        mailListTable.setAutoCreateRowSorter(true);
        mailListTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        mailListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Subject", "Sender", "Date", "Attachment"
            }

        )
        {
            @Override
            public Class<?> getColumnClass(int column) {
                Object value=this.getValueAt(0,column);
                return (value==null?Object.class:value.getClass());
            }
        }

    );
    mailListTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    mailListTable.getColumnModel().getColumn(0).setMinWidth(40);
    mailListTable.getColumnModel().getColumn(0).setMaxWidth(40);
    mailListTable.getColumnModel().getColumn(0).setPreferredWidth(40);
    mailListTable.getColumnModel().getColumn(4).setMaxWidth(100);
    mailListTable.getColumnModel().getColumn(4).setPreferredWidth(100);
    mailListTable.getColumnModel().getColumn(3).setMaxWidth(110);
    mailListTable.getColumnModel().getColumn(3).setPreferredWidth(110);
    mailListTable.setRowHeight(25);
    jScrollPane1.setViewportView(mailListTable);

    progressbar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/emailextractor/signLogo.gif"))); // NOI18N
    progressbar.setVisible(false);

    emailAddressLable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
    emailAddressLable.setText(userName);

    signOutBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
    signOutBtn.setText("Sign Out");
    signOutBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            signOutBtnActionPerformed(evt);
        }
    });

    emailAccountBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
    emailAccountBtn.setText("Email Account");

    emailRadioBtn.setBackground(new java.awt.Color(153, 153, 153));
    buttonGroup1.add(emailRadioBtn);
    emailRadioBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
    emailRadioBtn.setSelected(true);
    emailRadioBtn.setText("Search By Email");
    emailRadioBtn.setBorder(null);
    emailRadioBtn.setRequestFocusEnabled(false);

    subjectRadioBtn.setBackground(new java.awt.Color(153, 153, 153));
    buttonGroup1.add(subjectRadioBtn);
    subjectRadioBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
    subjectRadioBtn.setText("Search By Subjcet");
    subjectRadioBtn.setBorder(null);

    stopBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
    stopBtn.setText("Stop");
    stopBtn.setVisible(false);
    stopBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            stopBtnActionPerformed(evt);
        }
    });

    getAllMailsBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
    getAllMailsBtn.setText("Get All Mails");
    getAllMailsBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            getAllMailsBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout ContainerLayout = new javax.swing.GroupLayout(Container);
    Container.setLayout(ContainerLayout);
    ContainerLayout.setHorizontalGroup(
        ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ContainerLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ContainerLayout.createSequentialGroup()
                    .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ContainerLayout.createSequentialGroup()
                            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(selectAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deselectAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chooseDownloadPathBtn)
                                .addComponent(createCsvFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(downloadAttachmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(emailAccountBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(ContainerLayout.createSequentialGroup()
                    .addComponent(emailRadioBtn)
                    .addGap(18, 18, 18)
                    .addComponent(subjectRadioBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailAddressLable))
                .addGroup(ContainerLayout.createSequentialGroup()
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(searchBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(getAllMailsBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(stopBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressbar)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(signOutBtn)))
            .addContainerGap())
    );
    ContainerLayout.setVerticalGroup(
        ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ContainerLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ContainerLayout.createSequentialGroup()
                    .addComponent(emailAddressLable)
                    .addGap(15, 15, 15))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerLayout.createSequentialGroup()
                    .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(subjectRadioBtn)
                        .addComponent(emailRadioBtn))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn)
                    .addComponent(signOutBtn)
                    .addComponent(stopBtn)
                    .addComponent(getAllMailsBtn))
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ContainerLayout.createSequentialGroup()
                    .addComponent(selectAllBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(deselectAllBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(chooseDownloadPathBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(createCsvFileBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(downloadAttachmentBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailAccountBtn))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(Container, javax.swing.GroupLayout.DEFAULT_SIZE, 977, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void signOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutBtnActionPerformed
        signOutBtn.setEnabled(false);
        new Thread() {
            public void run() {
                progressbar.setVisible(true);
                sc.signOut();
                progressbar.setVisible(false);
                dispose();
                LoginPage lp = new LoginPage();
                lp.setVisible(true);
                signOutBtn.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_signOutBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed


    }//GEN-LAST:event_searchBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        thisThread.suspend();
        progressbar.setVisible(false);
        getAllMailsBtn.setEnabled(true);
        searchBtn.setEnabled(true);
        stopBtn.setVisible(false);
    }//GEN-LAST:event_stopBtnActionPerformed

    private void getAllMailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllMailsBtnActionPerformed
        getAllMailsBtn.setEnabled(false);
        searchBtn.setEnabled(false);
        stopBtn.setVisible(true);
        model.setNumRows(0);
        new Thread("getAllMailThread") {
            public void run() {
                thisThread = Thread.currentThread();
                progressbar.setVisible(true);
                messages = sc.getMessage();
                //System.out.println(messages.length);
                for (int i = messages.length - 1; i > 0; i--) {
                    Message message = messages[i];
                    String attachment = isAttachment(message);
                    try {
                        model.insertRow(model.getRowCount(), new Object[]{new Boolean(false),
                            message.getSubject(), message.getFrom()[0], message.getReceivedDate(), attachment});
                    } catch (MessagingException ex) {
                        Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                progressbar.setVisible(false);
                getAllMailsBtn.setEnabled(true);
                searchBtn.setEnabled(true);
                stopBtn.setVisible(false);
            }
        }.start();
    }//GEN-LAST:event_getAllMailsBtnActionPerformed

    private String isAttachment(Message message) {
        String subject;
        String contentType = null;
        try {
            subject = message.getSubject();
            contentType = message.getContentType();
        } catch (MessagingException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (contentType.contains("multipart/MIXED")) {
            return "Attachment";
        } else if (contentType.contains("TEXT/PLAIN")) {
            return "Null";
        } else
            return "Null";

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Container;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseDownloadPathBtn;
    private javax.swing.JButton createCsvFileBtn;
    private javax.swing.JButton deselectAllBtn;
    private javax.swing.JButton downloadAttachmentBtn;
    private javax.swing.JButton emailAccountBtn;
    private javax.swing.JLabel emailAddressLable;
    private javax.swing.JRadioButton emailRadioBtn;
    private javax.swing.JButton getAllMailsBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mailListTable;
    private javax.swing.JLabel progressbar;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchText;
    private javax.swing.JButton selectAllBtn;
    private javax.swing.JButton signOutBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JRadioButton subjectRadioBtn;
    // End of variables declaration//GEN-END:variables
}
